* Loader for F18A GPU version of Mandlebrot viewer
* Pretty much all init is done by the GPU

	AORG >A000		* 9900
*	AORG >6000		* for cart
	
*		DATA >AA01,>0200,>0000,PROG1,>0000,>0000
*PROG1	DATA >0000,MAIN,>094D
*		TEXT 'ANDLEGPU'
*		EVEN

MAIN
	LWPI >8300		* 9900 only
		
* Set VDP write address		
	LI R0,>025B		* load address in VDP, write address, swapped
	MOVB R0,@>8C02
	SWPB R0
	MOVB R0,@>8C02

* copy GPU program into VDP RAM		
	LI R0,MANGPU
	LI R1,SIZE_OF_MANGPU
LP	
	MOVB *R0+,@>8C00
	DEC R1
	JNE LP
		
* start the GPU
	LI R0,>B91C             * VR1/57, value 00011100
	BL @VDPWA               * write once (corrupts VDPR1)
	BL @VDPWA               * write again (unlocks enhanced mode)

	LI R0,>B61B				* MSB
	BL @VDPWA
	LI R0,>B702				* LSB and start
	BL @VDPWA

* GPU should be running, we can just idle now.
* I'll let the user quit, but if you quit before the GPU is done,
* it won't stop running. ;)

BYE
	LIMI 2
	LIMI 0
	JMP BYE
	
* Write address or register
VDPWA
	SWPB R0
	MOVB R0,@>8C02
	SWPB R0
	MOVB R0,@>8C02
	B *R11  

*
* Data file MandleGPU.bin - Nov 27, 2013
*

MANGPU
 BYTE >02,>00,>11,>00,>C8,>00,>1E,>2A  * 00000000 .......*
 BYTE >02,>01,>1B,>66,>06,>A0,>1B,>72  * 00000008 ...f...r
 BYTE >06,>A0,>1B,>20,>06,>A0,>1B,>54  * 00000010 ... ...T
 BYTE >06,>A0,>1B,>9E,>03,>40,>C0,>CB  * 00000018 .....@..
 BYTE >02,>00,>18,>00,>02,>02,>00,>03  * 00000020 ........
 BYTE >04,>C1,>DC,>01,>02,>21,>01,>00  * 00000028 .....!..
 BYTE >16,>FC,>06,>02,>16,>F9,>04,>C0  * 00000030 ........
 BYTE >02,>01,>0C,>00,>04,>F0,>06,>01  * 00000038 ........
 BYTE >16,>FD,>02,>00,>20,>00,>02,>01  * 00000040 .... ...
 BYTE >0C,>00,>04,>F0,>06,>01,>16,>FD  * 00000048 ........
 BYTE >04,>53,>02,>0C,>C0,>00,>02,>0D  * 00000050 .S......
 BYTE >28,>00,>02,>0E,>50,>00,>02,>0F  * 00000058 (...P...
 BYTE >B0,>00,>04,>5B,>02,>E2,>06,>FF  * 00000060 ...[....
 BYTE >03,>36,>03,>00,>5B,>00,>00,>00  * 00000068 .6..[...
 BYTE >02,>03,>60,>00,>DC,>F1,>16,>FE  * 00000070 ..`.....
 BYTE >02,>01,>D0,>00,>D8,>01,>1B,>00  * 00000078 ........
 BYTE >04,>5B,>80,>00,>07,>40,>38,>00  * 00000080 .[...@8.
 BYTE >C0,>80,>02,>42,>F0,>00,>16,>04  * 00000088 ...B....
 BYTE >09,>D1,>0A,>30,>E0,>01,>04,>5B  * 00000090 ...0...[
 BYTE >07,>00,>04,>5B,>C8,>0B,>1E,>28  * 00000098 ...[...(
 BYTE >C8,>0C,>1E,>20,>C8,>0D,>1E,>22  * 000000A0 ... ..."
 BYTE >C8,>0E,>1E,>24,>C8,>0F,>1E,>26  * 000000A8 ...$...&
 BYTE >08,>8E,>04,>C3,>C0,>4F,>15,>03  * 000000B0 .....O..
 BYTE >13,>02,>07,>41,>07,>03,>04,>C0  * 000000B8 ...A....
 BYTE >02,>02,>00,>C0,>3C,>02,>C3,>C0  * 000000C0 ....<...
 BYTE >C0,>C3,>13,>01,>05,>0F,>04,>CA  * 000000C8 ........
 BYTE >C3,>20,>1E,>20,>04,>C9,>04,>C6  * 000000D0 . . ....
 BYTE >04,>C7,>02,>08,>00,>0E,>C0,>06  * 000000D8 ........
 BYTE >06,>A0,>1B,>86,>02,>80,>FF,>FF  * 000000E0 ........
 BYTE >13,>2D,>C1,>00,>C0,>07,>06,>A0  * 000000E8 .-......
 BYTE >1B,>86,>02,>80,>FF,>FF,>13,>26  * 000000F0 .......&
 BYTE >C1,>40,>09,>50,>C0,>44,>09,>51  * 000000F8 .@.P.D.Q
 BYTE >A0,>01,>02,>80,>04,>00,>14,>1E  * 00000100 ........
 BYTE >06,>08,>13,>1C,>C0,>04,>60,>05  * 00000108 ......`.
 BYTE >A0,>0C,>04,>C5,>C0,>46,>20,>60  * 00000110 .....F `
 BYTE >1B,>84,>16,>02,>05,>45,>07,>41  * 00000118 .....E.A
 BYTE >C0,>87,>20,>A0,>1B,>84,>16,>02  * 00000120 .. .....
 BYTE >05,>45,>07,>42,>38,>42,>09,>D2  * 00000128 .E.B8B..
 BYTE >0A,>31,>E0,>42,>0A,>11,>C1,>45  * 00000130 .1.B...E
 BYTE >13,>01,>05,>01,>A0,>4D,>C1,>C1  * 00000138 .....M..
 BYTE >C1,>80,>10,>CD,>06,>A0,>1C,>7C  * 00000140 .......|
 BYTE >A3,>0E,>05,>89,>02,>89,>01,>00  * 00000148 ........
 BYTE >16,>C2,>A3,>4F,>05,>8A,>02,>8A  * 00000150 ...O....
 BYTE >00,>C0,>16,>BA,>C2,>E0,>1E,>28  * 00000158 .......(
 BYTE >C3,>20,>1E,>20,>C3,>60,>1E,>22  * 00000160 . . .`."
 BYTE >C3,>A0,>1E,>24,>C3,>E0,>1E,>26  * 00000168 ...$...&
 BYTE >04,>5B,>80,>40,>20,>10,>08,>04  * 00000170 .[.@ ...
 BYTE >02,>01,>C2,>08,>13,>22,>05,>88  * 00000178 ....."..
 BYTE >0A,>C8,>C0,>E0,>1E,>2A,>C0,>03  * 00000180 .....*..
 BYTE >02,>40,>F0,>00,>02,>80,>10,>00  * 00000188 .@......
 BYTE >13,>0B,>82,>00,>13,>09,>C0,>03  * 00000190 ........
 BYTE >02,>40,>0F,>00,>13,>05,>09,>48  * 00000198 .@.....H
 BYTE >02,>43,>F0,>FF,>F0,>C8,>10,>21  * 000001A0 .C.....!
 BYTE >02,>43,>0F,>FF,>F0,>C8,>C0,>89  * 000001A8 .C......
 BYTE >02,>42,>00,>07,>D0,>A2,>1C,>74  * 000001B0 .B.....t
 BYTE >06,>C2,>D0,>A0,>1B,>85,>E0,>C2  * 000001B8 ........
 BYTE >10,>14,>C0,>E0,>1E,>2A,>C0,>03  * 000001C0 .....*..
 BYTE >02,>40,>0F,>00,>13,>0E,>02,>43  * 000001C8 .@.....C
 BYTE >00,>FF,>0A,>40,>F0,>C0,>C0,>49  * 000001D0 ...@...I
 BYTE >02,>41,>00,>07,>13,>06,>02,>02  * 000001D8 .A......
 BYTE >00,>80,>E0,>C2,>09,>12,>06,>01  * 000001E0 ........
 BYTE >16,>FC,>C0,>09,>02,>40,>00,>07  * 000001E8 .....@..
 BYTE >02,>80,>00,>07,>16,>14,>06,>C3  * 000001F0 ........
 BYTE >C0,>0A,>0A,>50,>E0,>0A,>02,>40  * 000001F8 ...P...@
 BYTE >FF,>07,>C0,>89,>02,>42,>00,>07  * 00000200 .....B..
 BYTE >A0,>09,>60,>02,>C0,>8B,>D4,>03  * 00000208 ..`.....
 BYTE >02,>20,>20,>00,>06,>C3,>D4,>03  * 00000210 .  .....
 BYTE >02,>03,>11,>00,>C2,>C2,>C8,>03  * 00000218 ........
 BYTE >1E,>2A,>04,>5B,>00,>00,>00,>00  * 00000220 .*.[....
 BYTE >00,>00,>00,>00,>00,>00,>00,>00  * 00000228 ........

* Size of data in above array (Array may be padded but this will be correct)
SIZE_OF_MANGPU EQU 548
	
	END
	
		
		